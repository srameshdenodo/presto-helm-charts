# Default values for presto

image:
  #repository: prestodb/presto
  repository: ahanaio/prestodb-sandbox
  pullPolicy: IfNotPresent
  tag: ~

imagePullSecrets: []

service:
  # type: ClusterIP
  # port: 8080
  # nodePort: ~
  # labels: {}
  # annotations: {}

  type: NodePort
  port: 8080
  nodePort: 30400
  labels: {}
  annotations: {}
  

ingress:
  enabled: false
  labels: {}
  annotations: {}
  ingressClassName: ~
  tls: []
  host: presto.local
  path: /
  pathType: Prefix

serviceAccount:
  create: true
  name: ~
  labels: {}
  annotations: {}

# Common environment variables (templated)
env: []
# Common envFrom items to set up environment variables (templated)
envFrom: []

# Additional common volumes (templated)
volumes: []
# Additional common volumeMounts (templated)
volumeMounts: []

# Additional common init containers (templated)
initContainers: []
# Additional common containers (templated)
containers: []

# Constrain all presto pods to nodes with specific node labels
nodeSelector: {}
# Constrain all presto pods to nodes by affinity/anti-affinity rules
affinity: {}
# Allow to schedule all presto pods on nodes with matching taints
tolerations: []

# Security context by default
securityContext: {}

# Presto home directory
home: /opt/presto-server

# Deployment mode
# single - Minimal Presto deployment where single pod acts as Coordinator and Worker
# cluster - Standard Presto deployment with one Coordinator and multiple Workers
# ha-cluster - Highly available Presto deployment with multiple Resource Managers, Coordinators and Workers
# mode: cluster
mode: single

# Common node properties, see https://prestodb.io/docs/current/installation/deployment.html#node-properties
node:
  location: presto.local
  environment: development
  dataDir: /var/presto/data

# Common JVM options, see https://prestodb.io/docs/current/installation/deployment.html#jvm-config
jvm: |-
  -server
  -XX:+ExitOnOutOfMemoryError
  -Djdk.attach.allowAttachSelf=true

# Common configuration properties, see https://prestodb.io/docs/current/installation/deployment.html#config-properties
config: |-
  query.max-memory=1GB
  query.max-memory-per-node=512MB

# Common log-levels properties, see https://prestodb.io/docs/current/installation/deployment.html#log-levels
log: |-
  com.facebook.presto=INFO

# Resource Manager configuration
resourceManager:
  # Number of resource managers in "ha-cluster" mode
  replicas: 1
  # Resource manager JVM options (overwrites common JVM options)
  jvm: ""
  # Command to launch resource manager (templated)
  command: ["sh", "-c", "$PRESTO_HOME/bin/launcher run"]
  # Arguments to launch resource manager (templated)
  args: ~
  # Additional resource manager environment variables (templated)
  env: []
  # Additional resource manager envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional resource manager volumes (templated)
  volumes: []
  # Additional resource manager volumeMounts (templated)
  volumeMounts: []
  # Additional resource manager init containers (templated)
  initContainers: []
  # Additional resource manager containers (templated)
  containers: []
  # Resource manager liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Resource manager readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for resource manager
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Resource manager resource limits and requests
  resources: {}
  # Constrain resource manager pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain resource manager pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule resource manager pods on nodes with matching taints
  tolerations: []
  # Resource manager security context (overwrites default security context)
  securityContext: {}

# Coordinator configuration
coordinator:
  # Number of coordinators in "ha-cluster" mode
  replicas: 1
  # Coordinator JVM options (overwrites common JVM options)
  jvm: ""
  # Command to launch coordinator (templated)
  command: ["sh", "-c", "$PRESTO_HOME/bin/launcher run"]
  # Arguments to launch coordinator (templated)
  args: ~
  # Additional coordinator environment variables (templated)
  env: []
  # Additional coordinator envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional coordinator volumes (templated)
  volumes: []
  # Additional coordinator volumeMounts (templated)
  volumeMounts: []
  # Additional coordinator init containers (templated)
  initContainers: []
  # Additional coordinator containers (templated)
  containers: []
  # Coordinator liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Coordinator readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for coordinator
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Coordinator resource limits and requests
  resources: 
    limits:
      cpu: 4
      memory: 6Gi
  # Constrain coordinator pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain coordinator pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule coordinator pods on nodes with matching taints
  tolerations: []
  # Coordinator security context (overwrites default security context)
  securityContext: {}

# Worker configuration
worker:
  # Number of workers in "cluster" and "ha-cluster" modes
  replicas: 2
  # Worker JVM options (overwrites common JVM options)
  jvm: ""
  # Command to launch worker (templated)
  command: ["sh", "-c", "$PRESTO_HOME/bin/launcher run"]
  # Arguments to launch worker (templated)
  args: ~
  # Additional worker environment variables (templated)
  env: []
  # Additional worker envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional worker volumes (templated)
  volumes: []
  # Additional worker volumeMounts (templated)
  volumeMounts: []
  # Additional worker init containers (templated)
  initContainers: []
  # Additional worker containers (templated)
  containers: []
  # Worker liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Worker readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for worker
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Worker resource limits and requests
  resources: {}
  # Constrain worker pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain worker pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule worker pods on nodes with matching taints
  tolerations: []
  # Worker security context (overwrites default security context)
  securityContext: {}

# Catalogs
#catalog: {}
catalog:
  hive: |-
    connector.name: hive-hadoop2
    hive.metastore.uri: thrift://hive-metastore:9083
    hive.config.resources: /etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml
    hive.s3.endpoint: http://minio:9000
    hive.s3.aws-access-key: presto
    hive.s3.aws-secret-key: presto00
    hive.s3.path-style-access=true
#  jmx: |-
#    connector.name=jmx
#  tpch: |-
#    connector.name=tpch
#  tpcds: |-
#    connector.name=tpcds
